classdef aten__mul15 < nnet.layer.Layer & nnet.layer.Formattable
    %aten__mul15 Auto-generated custom layer
    % Auto-generated by MATLAB on 28-May-2024 13:04:55
    
    properties (Learnable)
        % Networks (type dlnetwork)
        
    end
    
    properties
        % Non-Trainable Parameters
        
        
        mul_10
        
        
    end
    
    properties (Learnable)
        % Trainable Parameters
        
    end
    
    methods
        function obj = aten__mul15(Name, Type, InputNames, OutputNames)
            obj.Name = Name;
            obj.Type = Type;
            obj.NumInputs = 2;
            obj.NumOutputs = 1;
            obj.InputNames = InputNames;
            obj.OutputNames = OutputNames;
        end
        
        function [mul_11] = predict(obj,mul_8, mul_8_rank)
            
            if ~contains(dims(mul_8),'U')
                [mul_8] = struct('value', mul_8, 'rank', ndims(mul_8));
            else
                [mul_8] = struct('value', mul_8, 'rank', int64(numel(mul_8_rank)));
            end
            
            import mlp_model_40phases_smoothed.ops.*;
            
            [mul_10] = makeStructForConstant(single(obj.mul_10), int64([0]), "Tensor");
            [mul_11] = pyElementwiseBinary(mul_8, mul_10, 'times');
            
            mul_11 = mul_11.value ;
            
        end
        
        
        
        function [mul_11] = forward(obj,mul_8, mul_8_rank)
            
            if ~contains(dims(mul_8),'U')
                [mul_8] = struct('value', mul_8, 'rank', ndims(mul_8));
            else
                [mul_8] = struct('value', mul_8, 'rank', int64(numel(mul_8_rank)));
            end
            
            import mlp_model_40phases_smoothed.ops.*;
            
            [mul_10] = makeStructForConstant(single(obj.mul_10), int64([0]), "Tensor");
            [mul_11] = pyElementwiseBinary(mul_8, mul_10, 'times');
            
            mul_11 = mul_11.value ;
            
        end
        
        
    end
end

