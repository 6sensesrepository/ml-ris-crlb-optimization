classdef aten__sigmoid13 < nnet.layer.Layer & nnet.layer.Formattable
    %aten__sigmoid13 Auto-generated custom layer
    % Auto-generated by MATLAB on 28-May-2024 13:04:55
    
    properties (Learnable)
        % Networks (type dlnetwork)
        
    end
    
    properties
        % Non-Trainable Parameters
        
    end
    
    properties (Learnable)
        % Trainable Parameters
        
    end
    
    methods
        function obj = aten__sigmoid13(Name, Type, InputNames, OutputNames)
            obj.Name = Name;
            obj.Type = Type;
            obj.NumInputs = 2;
            obj.NumOutputs = 2;
            obj.InputNames = InputNames;
            obj.OutputNames = OutputNames;
        end
        
        function [sigmoid_3, sigmoid_3_rank] = predict(obj,sigmoid_argument1_1, sigmoid_argument1_1_rank)
            
            if ~contains(dims(sigmoid_argument1_1),'U')
                [sigmoid_argument1_1] = struct('value', sigmoid_argument1_1, 'rank', ndims(sigmoid_argument1_1));
            else
                [sigmoid_argument1_1] = struct('value', sigmoid_argument1_1, 'rank', int64(numel(sigmoid_argument1_1_rank)));
            end
            
            import mlp_model_40phases_smoothed.ops.*;
            
            [sigmoid_3] = pySigmoid(sigmoid_argument1_1);
            [sigmoid_3_rank] = ones([1,sigmoid_3.rank]);
            sigmoid_3_rank = dlarray(sigmoid_3_rank,'UU');
            sigmoid_3 = sigmoid_3.value ;
            
        end
        
        
        
        function [sigmoid_3, sigmoid_3_rank] = forward(obj,sigmoid_argument1_1, sigmoid_argument1_1_rank)
            
            if ~contains(dims(sigmoid_argument1_1),'U')
                [sigmoid_argument1_1] = struct('value', sigmoid_argument1_1, 'rank', ndims(sigmoid_argument1_1));
            else
                [sigmoid_argument1_1] = struct('value', sigmoid_argument1_1, 'rank', int64(numel(sigmoid_argument1_1_rank)));
            end
            
            import mlp_model_40phases_smoothed.ops.*;
            
            [sigmoid_3] = pySigmoid(sigmoid_argument1_1);
            [sigmoid_3_rank] = ones([1,sigmoid_3.rank]);
            sigmoid_3_rank = dlarray(sigmoid_3_rank,'UU');
            sigmoid_3 = sigmoid_3.value ;
            
        end
        
        
    end
end

