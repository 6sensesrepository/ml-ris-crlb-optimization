classdef aten__linear0 < nnet.layer.Layer & nnet.layer.Formattable
    %aten__linear0 Auto-generated custom layer
    % Auto-generated by MATLAB on 28-May-2024 13:04:50
    
    properties (Learnable)
        % Networks (type dlnetwork)
        
    end
    
    properties
        % Non-Trainable Parameters
        
    end
    
    properties (Learnable)
        % Trainable Parameters
        
        Param_weight
        Param_bias
    end
    
    methods
        function obj = aten__linear0(Name, Type, InputNames, OutputNames)
            obj.Name = Name;
            obj.Type = Type;
            obj.NumInputs = 1;
            obj.NumOutputs = 2;
            obj.InputNames = InputNames;
            obj.OutputNames = OutputNames;
        end
        
        function [linear_9, linear_9_rank] = predict(obj,linear_x_1)
            
            if ~contains(dims(linear_x_1),'U')
                [linear_x_1] = struct('value', linear_x_1, 'rank', ndims(linear_x_1));
            else
                [linear_x_1] = struct('value', linear_x_1, 'rank', int64(ndims(linear_x_1)));
                warning(message('nnet_cnn_pytorchconverter:pytorchconverter:PossibleLossOfRank', 'linear_x_1', 'aten__linear0'));
            end
            
            import mlp_model_40phases.ops.*;
            
            linear_weight_1 = obj.Param_weight;
            
            [linear_weight_1] = struct('value', linear_weight_1, 'rank', 2);
            
            linear_bias_1 = obj.Param_bias;
            
            [linear_bias_1] = struct('value', linear_bias_1, 'rank', 1);
            
            [linear_9] = pyLinear(linear_x_1, linear_weight_1, linear_bias_1);
            [linear_9_rank] = ones([1,linear_9.rank]);
            linear_9_rank = dlarray(linear_9_rank,'UU');
            linear_9 = linear_9.value ;
            
        end
        
        
        
        function [linear_9, linear_9_rank] = forward(obj,linear_x_1)
            
            if ~contains(dims(linear_x_1),'U')
                [linear_x_1] = struct('value', linear_x_1, 'rank', ndims(linear_x_1));
            else
                [linear_x_1] = struct('value', linear_x_1, 'rank', int64(ndims(linear_x_1)));
                warning(message('nnet_cnn_pytorchconverter:pytorchconverter:PossibleLossOfRank', 'linear_x_1', 'aten__linear0'));
            end
            
            import mlp_model_40phases.ops.*;
            
            linear_weight_1 = obj.Param_weight;
            
            [linear_weight_1] = struct('value', linear_weight_1, 'rank', 2);
            
            linear_bias_1 = obj.Param_bias;
            
            [linear_bias_1] = struct('value', linear_bias_1, 'rank', 1);
            
            [linear_9] = pyLinear(linear_x_1, linear_weight_1, linear_bias_1);
            [linear_9_rank] = ones([1,linear_9.rank]);
            linear_9_rank = dlarray(linear_9_rank,'UU');
            linear_9 = linear_9.value ;
            
        end
        
        
    end
end

