classdef aten__mul14 < nnet.layer.Layer & nnet.layer.Formattable
    %aten__mul14 Auto-generated custom layer
    % Auto-generated by MATLAB on 28-May-2024 13:04:58
    
    properties (Learnable)
        % Networks (type dlnetwork)
        
    end
    
    properties
        % Non-Trainable Parameters
        
        
        mul_7
        
        
    end
    
    properties (Learnable)
        % Trainable Parameters
        
    end
    
    methods
        function obj = aten__mul14(Name, Type, InputNames, OutputNames)
            obj.Name = Name;
            obj.Type = Type;
            obj.NumInputs = 2;
            obj.NumOutputs = 2;
            obj.InputNames = InputNames;
            obj.OutputNames = OutputNames;
        end
        
        function [mul_8, mul_8_rank] = predict(obj,mul_6, mul_6_rank)
            
            if ~contains(dims(mul_6),'U')
                [mul_6] = struct('value', mul_6, 'rank', ndims(mul_6));
            else
                [mul_6] = struct('value', mul_6, 'rank', int64(numel(mul_6_rank)));
            end
            
            import mlp_model_40phases_smoothed_conditional.ops.*;
            
            [mul_7] = makeStructForConstant(single(obj.mul_7), int64([0]), "Tensor");
            [mul_8] = pyElementwiseBinary(mul_6, mul_7, 'times');
            [mul_8_rank] = ones([1,mul_8.rank]);
            mul_8_rank = dlarray(mul_8_rank,'UU');
            mul_8 = mul_8.value ;
            
        end
        
        
        
        function [mul_8, mul_8_rank] = forward(obj,mul_6, mul_6_rank)
            
            if ~contains(dims(mul_6),'U')
                [mul_6] = struct('value', mul_6, 'rank', ndims(mul_6));
            else
                [mul_6] = struct('value', mul_6, 'rank', int64(numel(mul_6_rank)));
            end
            
            import mlp_model_40phases_smoothed_conditional.ops.*;
            
            [mul_7] = makeStructForConstant(single(obj.mul_7), int64([0]), "Tensor");
            [mul_8] = pyElementwiseBinary(mul_6, mul_7, 'times');
            [mul_8_rank] = ones([1,mul_8.rank]);
            mul_8_rank = dlarray(mul_8_rank,'UU');
            mul_8 = mul_8.value ;
            
        end
        
        
    end
end

